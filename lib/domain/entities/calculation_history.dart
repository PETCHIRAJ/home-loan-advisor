import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';
import 'loan_parameters.dart';
import 'emi_result.dart';

part 'calculation_history.g.dart';

/// Represents a saved calculation in the history
@JsonSerializable()
class CalculationHistory extends Equatable {
  final String id;
  final DateTime timestamp;
  final LoanParameters parameters;
  final EMIResult result;
  final String? name; // User-defined name for bookmarked calculations
  final bool isBookmarked;
  final Map<String, dynamic>? metadata; // Additional data like calculation type

  const CalculationHistory({
    required this.id,
    required this.timestamp,
    required this.parameters,
    required this.result,
    this.name,
    this.isBookmarked = false,
    this.metadata,
  });

  /// Copy with method for easy updates
  CalculationHistory copyWith({
    String? id,
    DateTime? timestamp,
    LoanParameters? parameters,
    EMIResult? result,
    String? name,
    bool? isBookmarked,
    Map<String, dynamic>? metadata,
  }) {
    return CalculationHistory(
      id: id ?? this.id,
      timestamp: timestamp ?? this.timestamp,
      parameters: parameters ?? this.parameters,
      result: result ?? this.result,
      name: name ?? this.name,
      isBookmarked: isBookmarked ?? this.isBookmarked,
      metadata: metadata ?? this.metadata,
    );
  }

  /// Factory for creating from JSON
  factory CalculationHistory.fromJson(Map<String, dynamic> json) =>
      _$CalculationHistoryFromJson(json);

  /// Convert to JSON
  Map<String, dynamic> toJson() => _$CalculationHistoryToJson(this);

  /// Generate a summary string for sharing
  String generateSummary() {
    final loanAmountFormatted = parameters.loanAmount.toStringAsFixed(0);
    final emiFormatted = result.monthlyEMI.toStringAsFixed(0);
    final interestRate = parameters.interestRate.toStringAsFixed(2);
    final tenure = parameters.tenureYears;

    return '''
üìä Home Loan Calculation Summary

üí∞ Loan Amount: ‚Çπ$loanAmountFormatted
üìà Interest Rate: $interestRate%
‚è±Ô∏è  Tenure: $tenure years
üí≥ Monthly EMI: ‚Çπ$emiFormatted

üí∏ Total Interest: ‚Çπ${result.totalInterest.toStringAsFixed(0)}
üí∞ Total Amount: ‚Çπ${result.totalAmount.toStringAsFixed(0)}

üè¶ Tax Benefits (Annual):
   ‚Ä¢ Section 80C: ‚Çπ${result.taxBenefits.section80C.toStringAsFixed(0)}
   ‚Ä¢ Section 24B: ‚Çπ${result.taxBenefits.section24B.toStringAsFixed(0)}
   ‚Ä¢ Total Savings: ‚Çπ${result.taxBenefits.totalAnnualSavings.toStringAsFixed(0)}

${result.pmayBenefit?.isEligible == true ? 'üè† PMAY Subsidy: ‚Çπ${result.pmayBenefit!.subsidyAmount.toStringAsFixed(0)}' : ''}

Calculated on: ${timestamp.day}/${timestamp.month}/${timestamp.year}
Generated by Home Loan Advisor üì±
''';
  }

  @override
  List<Object?> get props => [
    id,
    timestamp,
    parameters,
    result,
    name,
    isBookmarked,
    metadata,
  ];
}

/// Quick access item for history list display
@JsonSerializable()
class HistoryItem extends Equatable {
  final String id;
  final DateTime timestamp;
  final double loanAmount;
  final double monthlyEMI;
  final double interestRate;
  final int tenureYears;
  final String? name;
  final bool isBookmarked;
  final double totalInterest;
  final double taxSavings;
  final bool hasPMAY;

  const HistoryItem({
    required this.id,
    required this.timestamp,
    required this.loanAmount,
    required this.monthlyEMI,
    required this.interestRate,
    required this.tenureYears,
    this.name,
    this.isBookmarked = false,
    required this.totalInterest,
    required this.taxSavings,
    this.hasPMAY = false,
  });

  /// Create from CalculationHistory
  factory HistoryItem.fromCalculationHistory(CalculationHistory history) {
    return HistoryItem(
      id: history.id,
      timestamp: history.timestamp,
      loanAmount: history.parameters.loanAmount,
      monthlyEMI: history.result.monthlyEMI,
      interestRate: history.parameters.interestRate,
      tenureYears: history.parameters.tenureYears,
      name: history.name,
      isBookmarked: history.isBookmarked,
      totalInterest: history.result.totalInterest,
      taxSavings: history.result.taxBenefits.totalAnnualSavings,
      hasPMAY: history.result.pmayBenefit?.isEligible ?? false,
    );
  }

  /// Factory for creating from JSON
  factory HistoryItem.fromJson(Map<String, dynamic> json) =>
      _$HistoryItemFromJson(json);

  /// Convert to JSON
  Map<String, dynamic> toJson() => _$HistoryItemToJson(this);

  @override
  List<Object?> get props => [
    id,
    timestamp,
    loanAmount,
    monthlyEMI,
    interestRate,
    tenureYears,
    name,
    isBookmarked,
    totalInterest,
    taxSavings,
    hasPMAY,
  ];
}

/// Statistics about calculation history
@JsonSerializable()
class HistoryStats extends Equatable {
  final int totalCalculations;
  final double averageLoanAmount;
  final double averageInterestRate;
  final int mostCommonTenure;
  final double totalPotentialSavings;
  final DateTime? firstCalculationDate;
  final DateTime? lastCalculationDate;
  final int bookmarkedCount;

  const HistoryStats({
    required this.totalCalculations,
    required this.averageLoanAmount,
    required this.averageInterestRate,
    required this.mostCommonTenure,
    required this.totalPotentialSavings,
    this.firstCalculationDate,
    this.lastCalculationDate,
    required this.bookmarkedCount,
  });

  /// Factory for creating from JSON
  factory HistoryStats.fromJson(Map<String, dynamic> json) =>
      _$HistoryStatsFromJson(json);

  /// Convert to JSON
  Map<String, dynamic> toJson() => _$HistoryStatsToJson(this);

  @override
  List<Object?> get props => [
    totalCalculations,
    averageLoanAmount,
    averageInterestRate,
    mostCommonTenure,
    totalPotentialSavings,
    firstCalculationDate,
    lastCalculationDate,
    bookmarkedCount,
  ];
}

/// Filter criteria for history search
enum HistoryFilter {
  all,
  bookmarked,
  today,
  thisWeek,
  thisMonth,
  lastMonth,
  customRange,
}

/// Sort options for history list
enum HistorySortBy {
  dateNewest,
  dateOldest,
  loanAmountHigh,
  loanAmountLow,
  emiHigh,
  emiLow,
  interestRateHigh,
  interestRateLow,
}

/// Export format options
enum ExportFormat { csv, pdf, text }
